# Test generated by RoostGPT for test python-test-23 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import unittest
from TicTacToe import win_check

class TestWinCheck(unittest.TestCase):

    def test_Win_check_8bf2ef15c2(self):
        # test case 1 - winning case
        board = ['#', 'X', 'X', 'X', '4', '5', '6', '7', '8', '9']         # Winning Row
        mark = 'X'
        self.assertTrue(win_check(board, mark))               # Expected to return True 

        # test case 2 - non-winning case
        board = ['#', 'X', 'O', 'X', '4', '5', '6', '7', '8', '9']         # No Winning Row
        mark = 'X'
        self.assertFalse(win_check(board, mark))              # Expected to return False

        # test case 3 - winning case
        board = ['#', 'O', '2', '3', 'O', '5', '6', 'O', '8', '9']         # Winning Column
        mark = 'O'
        self.assertTrue(win_check(board, mark))               # Expected to return True 

        # test case 4 - non-winning case
        board = ['#', 'O', '2', '3', 'X', '5', '6', 'O', '8', '9']         # No Winning Column
        mark = 'O'
        self.assertFalse(win_check(board, mark))              # Expected to return False

        # test case 5 - invalid mark
        board = ['#', 'X', '2', '3', 'X', '5', '6', 'X', '8', '9']         # Winning Column
        mark = 'O'
        self.assertFalse(win_check(board, mark))              # Expected to return False, because mark 'O' does not have a winning combination.


if __name__ == "__main__":
    unittest.main()
